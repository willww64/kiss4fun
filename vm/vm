#!/bin/bash

# vim: ft=sh sw=4 ts=4 sts=4 et ai :

set -o pipefail

# TODO: monitor socket occasionally connection refused:
#     2023/11/16 21:22:06 socat[18705] E connect(5, AF=1 "/run/user/1004/vm/master-monitor", 34): Connection refused
# TODO: serial console stuck
# TODO: check memory size & unit

# Default Vars
global_base=~/.local/share/vm
cloud_images_dir=~/.local/share/vm/cloud-images
cloud_image=debian-12-genericcloud-amd64.qcow2
backing_file=${cloud_images_dir}/${cloud_image}
bridge=${bridge:-br0}
cpu=${cpu:-1}
memory=${memory:-1G}
disk_size=${disk_size:-20G}
password="${password:-pAssw0rd}"

if [[ -z ${ssh_pubkey} ]]; then
    [[ -f ~/.ssh/id_ed25519.pub ]] && ssh_pubkey=~/.ssh/id_ed25519.pub
    [[ -f ~/.ssh/id_rsa.pub ]] && ssh_pubkey=~/.ssh/id_rsa.pub
fi

# Run Time Directory, e.g. /run/user/1000
# shellcheck disable=SC2154
readonly runtimed=${XDG_RUNTIME_DIR}/vm

user_data=$(
    cat <<EOF
#cloud-config
password: ${password}
chpasswd:
  expire: false
ssh_pwauth: True
ssh_authorized_keys:
  - $(cat "${ssh_pubkey}" || true)
timezone: Asia/Shanghai
apt:
  primary:
    - arches: [default]
      uri: http://mirrors.aliyun.com/debian
  security:
    - arches: [default]
      uri: http://mirrors.aliyun.com/debian-security
write_files:
  - path: /etc/systemd/journald.conf
    content: |
      # See journald.conf(5) for details.
      [Journal]
      SystemMaxUse=50M
      RuntimeMaxUse=50M
bootcmd:
  - "sed -i 's/^AcceptEnv LANG LC_*/#AcceptEnv LANG LC_*/' /etc/ssh/sshd_config"
EOF
)

network_config=$(
    cat <<EOF
version: 2
ethernets:
  en:
    match:
      name: en*
    dhcp4: true
EOF
)

create_drive() {
    # if you wanna preallocation with a backing file, you should turn extended_l2 on:
    #    preallocation=metadata,extended_l2=on
    # but the qemu version of centos7 doesn't support extended_l2
    qemu-img create -f qcow2 -o backing_fmt=qcow2,backing_file="${backing_file}" "${disk_file}" "${disk_size}"
}

create_userdata() {
    local t
    t=$(mktemp -d)
    cd "${t}" || return

    echo "local-hostname: ${vmname}" >meta-data
    echo "${user_data}" >user-data
    echo "${network_config}" >network-config

    genisoimage -output "${userdata_file}" -volid cidata -joliet -rock user-data meta-data network-config
    cd .. && rm -rf "${t}"
}

random_macaddr() {
    printf "52:54:%02x:%02x:%02x:%02x" $((RANDOM & 0xff)) $((RANDOM & 0xff)) $((RANDOM & 0xff)) $((RANDOM & 0xff))
}

create() {
    [[ -d $vm_dir ]] || mkdir -p "$vm_dir"
    [[ -f $disk_file ]] || create_drive
    [[ -f $userdata_file ]] || create_userdata
    macaddr=$(random_macaddr || true)
    echo "macaddr=${macaddr}" >>"${vars_file}"
}

run() {
    local extra_args=()
    if [[ -f $userdata_file ]]; then
        extra_args+=(
            -drive "file=$userdata_file,format=raw,if=virtio"
        )
    fi

    # helper=/usr/libexec/qemu-bridge-helper
    kvm=(qemu-system-x86_64 -enable-kvm)
    source /etc/os-release
    # shellcheck disable=SC2154
    [[ ${ID_LIKE} == "rhel fedora" ]] &&
        kvm=(/usr/libexec/qemu-kvm)

    cmd=(
        "${kvm[@]}"
        -daemonize -nodefaults -machine pc
        -pidfile "$pidfile"
        -cpu host -smp "$cpu"
        -m "$memory"
        -device virtio-balloon-pci
        -rtc "base=utc,clock=host"
        -netdev "bridge,br=${bridge},id=n1"
        -device "virtio-net-pci,netdev=n1,id=nic1,mac=${macaddr}"
        -drive "file=${disk_file},format=qcow2,if=virtio"
        -vga none -display none
        -serial "unix:${serial_sock},server=on,wait=off"
        -monitor "unix:${mon_sock},server=on,wait=off"
        "${extra_args[@]}"
    )

    if ((dry_run)); then
        echo "${cmd[@]}"
        return
    fi

    "${cmd[@]}"

    # Only use userdata at the first boot, so remove it after boot.
    if [[ -f $userdata_file ]]; then
        rm -f "$userdata_file"
    fi
}

console() {
    # escap key: Ctrl-Q
    socat stdin,cfmakeraw,escape=0x11 "unix-connect:${serial_sock}"
}

monitor() {
    socat stdin,cfmakeraw,escape=0x11 "unix-connect:${mon_sock}"
}

_monitor() {
    socat stdio "unix-connect:${mon_sock}"
}

poweroff() {
    echo system_powerdown | _monitor
    echo
}

load_vm_vars() {
    local vmname=${1}

    vm_dir=$global_base/$vmname
    disk_file=$vm_dir/disk.qcow2
    userdata_file=$vm_dir/userdata.img

    vars_file=$vm_dir/vars
    [[ -f $vars_file ]] && source "$vars_file"

    serial_sock=$runtimed/${vmname}-serial
    mon_sock=$runtimed/${vmname}-monitor
    pidfile=$runtimed/${vmname}.pid
}

delete() {
    rm -rf "${vm_dir}"
}

up() {
    create
    run
}

destroy() {
    poweroff
    delete
}

main() {
    [[ -d $global_base ]] || mkdir -p "$global_base"
    [[ -d $runtimed ]] || mkdir "$runtimed"

    [[ -f vmfile ]] || return
    source vmfile

    action=${1}
    shift
    vmname=${1}
    shift

    source vmfile

    case $action in
    create | run | up | poweroff | delete | destroy)
        [[ -n ${vmname} ]] && vms=("${vmname}")
        for vmname in "${vms[@]}"; do
            config "${vmname}"
            load_vm_vars "${vmname}"
            "${action}" "${vmname}"
        done
        ;;
    console | monitor)
        [[ -n ${vmname} ]] || return
        load_vm_vars "${vmname}"
        "${action}" "${vmname}"
        ;;
    *)
        echo unknown action "${action}"
        return 1
        ;;
    esac
}

main "$@"
